import { PaintWindow } from "paint_window.slint";
import { Button, TabWidget } from "std-widgets.slint";

export component AppWindow inherits Window {
  in property <image> canvas_background <=> paint_window.canvas_background;
  in property <image> canvas_source <=> paint_window.canvas_source;
  in property <image> canvas_buffer_source <=> paint_window.canvas_preview;
  in-out property canvas_width <=> paint_window.canvas_width;
  in-out property canvas_height <=> paint_window.canvas_height;
  out property <int> brush_value <=> paint_window.brush_value;
  callback mouse_event <=> paint_window.mouse_event;
  callback spin_box_edited <=> paint_window.spin_box_edited;
  callback select_freehand <=> paint_window.select_freehand;
  callback select_line <=> paint_window.select_line;
  callback select_rect <=> paint_window.select_rect;
  callback select_circle <=> paint_window.select_circle;
  callback clear <=> paint_window.clear;
  callback undo();
  callback redo();

  private property <bool> ctrl_pressed;
  forward-focus: key-handler;

  key-handler := FocusScope {
    key-pressed(event) => {
      if (event.modifiers.control && !ctrl_pressed) {
        ctrl_pressed = true;
      }
      if (ctrl_pressed && event.text == "z") {
        undo();
      }
      if (ctrl_pressed && event.text == "y") {
        redo();
      }
      accept
    }
    key-released(event) => {
      if (event.modifiers.control) {
        ctrl_pressed = false;
      }
      accept
    }
  }

  VerticalLayout {
    paint_window := PaintWindow { }
  }
}
